# DigiForge – Frontend Landing Page

A responsive landing page built with **HTML5**, **SCSS (BEM)**, **Bootstrap 5 (CDN)** and **Vanilla JavaScript**.  
Bundled with **Vite**.

---

## ✅ Final Project Structure (as used in this repo)

```
/
├─ dist/                          # Production build (generated by Vite)
├─ src/
│  ├─ assets/
│  │  └─ images/                  # All images live here
│  │     ├─ brands/
│  │     ├─ customer-section/
│  │     ├─ feature-section/
│  │     ├─ hero-section/
│  │     ├─ logo/
│  │     └─ services-section/
│  ├─ main.js                     # JS interactions
│  └─ main.scss                   # Global styles (SCSS + BEM)
├─ index.html                     # App entry
├─ vite.config.js                 # Vite config (uses base: './')
├─ package.json
└─ README.md
```

> Note: **Images are kept under `src/assets/images/**`** (not in `public`).  
> Vite will **process & hash** these files when they are referenced from HTML/SCSS/JS.

---

## 🖼 How to reference images (with Vite)

### In **HTML** (recommended for static images)
```html
<!-- From root index.html, point to src/assets/... -->
<img src="/src/assets/images/hero-section/heroImage.svg" alt="Hero" />
```
Vite will rewrite this to the proper hashed asset path in production.

### In **SCSS**
`main.scss` lives in `src/`, so use a **relative path from it**:
```scss
.hero {
  background-image: url("./assets/images/hero-section/heroImage.svg");
}
```

### In **JavaScript** (for dynamic images)
```js
import heroUrl from "./assets/images/hero-section/heroImage.svg";

const img = document.getElementById("heroImg");
img.src = heroUrl;
```

> Tips
> - Avoid spaces in filenames (e.g. `sony-logo-1.svg`, not `sony-logo 1.svg`).
> - Keep all section-specific images inside their subfolders for clarity.

---

## ⚙️ Build & Run

### 1) Install dependencies
```bash
npm install
```

### 2) Development (HMR)
```bash
npm run dev
```
Vite will serve the app (default: `http://localhost:5173`).

### 3) Production build
```bash
npm run build
```
Outputs to **`/dist`**.

### 4) Preview production build
```bash
npm run preview
```

> If you plan to serve the build from a **subfolder** (e.g., GitHub Pages), make sure `vite.config.js` uses a **relative base**:
> ```js
> // vite.config.js
> import { defineConfig } from "vite";
> export default defineConfig({ base: "./" });
> ```

---

## 🧩 Tech Stack

- HTML5 semantic structure
- SCSS with **BEM** and utility classes (`.text--base`, `.text--md`, `.text--xl`, `.text--accent`)
- Bootstrap 5 + Bootstrap Icons (via CDN)
- Vanilla JavaScript (header fade on scroll, mobile modal menu, featured list interactions, form validation)
- Vite for dev server and bundling

---

## 🪲 Common pitfalls (and fixes)

- **Images missing after build**  
  Ensure paths follow one of the patterns above. For HTML, use `/src/assets/...`. For SCSS, use `./assets/...` relative to `main.scss`.

- **CSS not loading**  
  Confirm `src/main.js` imports the stylesheet:
  ```js
  import "./main.scss";
  ```

- **Hosting from a subpath**
  Use `base: "./"` in `vite.config.js` and avoid absolute `/public/...` paths.

---